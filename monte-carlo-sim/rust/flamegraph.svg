<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="8458"><g><title>core::intrinsics::copy (2 samples, 0.02%)</title><rect x="0.0000%" y="997" width="0.0236%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u8,i8)&gt;&gt; (2 samples, 0.02%)</title><rect x="0.0236%" y="997" width="0.0236%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.2736%" y="1007.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="0.0236%" y="981" width="0.0236%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.2736%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u8,i8),alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="0.0236%" y="965" width="0.0236%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="0.2736%" y="975.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="0.0236%" y="949" width="0.0236%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="0.2736%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,i8)&gt;&gt; (2 samples, 0.02%)</title><rect x="0.0236%" y="933" width="0.0236%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="2"/><text x="0.2736%" y="943.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="0.0236%" y="917" width="0.0236%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="2"/><text x="0.2736%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="0.0236%" y="901" width="0.0236%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="2"/><text x="0.2736%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="0.0236%" y="885" width="0.0236%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="2"/><text x="0.2736%" y="895.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="0.0236%" y="869" width="0.0236%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="2"/><text x="0.2736%" y="879.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="0.0236%" y="853" width="0.0236%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="2"/><text x="0.2736%" y="863.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by_key (1 samples, 0.01%)</title><rect x="0.0473%" y="997" width="0.0118%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="0.2973%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.0473%" y="981" width="0.0118%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="1"/><text x="0.2973%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.0473%" y="965" width="0.0118%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="0.2973%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="0.0473%" y="949" width="0.0118%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="0.2973%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="0.0473%" y="933" width="0.0118%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="0.2973%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="0.0473%" y="917" width="0.0118%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="0.2973%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="0.0473%" y="901" width="0.0118%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.2973%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="0.0473%" y="885" width="0.0118%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="0.2973%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="0.0473%" y="869" width="0.0118%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="0.2973%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="0.0473%" y="853" width="0.0118%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="0.2973%" y="863.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="0.0473%" y="837" width="0.0118%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="0.2973%" y="847.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="0.0473%" y="821" width="0.0118%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="1"/><text x="0.2973%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="0.0473%" y="805" width="0.0118%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="0.2973%" y="815.50"></text></g><g><title>[[stack]] (6 samples, 0.07%)</title><rect x="0.0000%" y="1029" width="0.0709%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1039.50"></text></g><g><title>monte_carlo_sim::sim_avx512::simulate (6 samples, 0.07%)</title><rect x="0.0000%" y="1013" width="0.0709%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1023.50"></text></g><g><title>monte_carlo_sim::sim_avx512::State::reset_table (1 samples, 0.01%)</title><rect x="0.0591%" y="997" width="0.0118%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="0.3091%" y="1007.50"></text></g><g><title>[libc.so.6] (6 samples, 0.07%)</title><rect x="0.0828%" y="1013" width="0.0709%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="6"/><text x="0.3328%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="1013" width="0.0118%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="1"/><text x="0.4037%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="997" width="0.0118%" height="15" fill="rgb(232,36,49)" fg:x="13" fg:w="1"/><text x="0.4037%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="981" width="0.0118%" height="15" fill="rgb(209,103,24)" fg:x="13" fg:w="1"/><text x="0.4037%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="965" width="0.0118%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="1"/><text x="0.4037%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="949" width="0.0118%" height="15" fill="rgb(213,181,19)" fg:x="13" fg:w="1"/><text x="0.4037%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="933" width="0.0118%" height="15" fill="rgb(254,191,54)" fg:x="13" fg:w="1"/><text x="0.4037%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="917" width="0.0118%" height="15" fill="rgb(241,83,37)" fg:x="13" fg:w="1"/><text x="0.4037%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="901" width="0.0118%" height="15" fill="rgb(233,36,39)" fg:x="13" fg:w="1"/><text x="0.4037%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="885" width="0.0118%" height="15" fill="rgb(226,3,54)" fg:x="13" fg:w="1"/><text x="0.4037%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="869" width="0.0118%" height="15" fill="rgb(245,192,40)" fg:x="13" fg:w="1"/><text x="0.4037%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="853" width="0.0118%" height="15" fill="rgb(238,167,29)" fg:x="13" fg:w="1"/><text x="0.4037%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="837" width="0.0118%" height="15" fill="rgb(232,182,51)" fg:x="13" fg:w="1"/><text x="0.4037%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1537%" y="821" width="0.0118%" height="15" fill="rgb(231,60,39)" fg:x="13" fg:w="1"/><text x="0.4037%" y="831.50"></text></g><g><title>cfree (4 samples, 0.05%)</title><rect x="0.1655%" y="1013" width="0.0473%" height="15" fill="rgb(208,69,12)" fg:x="14" fg:w="4"/><text x="0.4155%" y="1023.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (13 samples, 0.15%)</title><rect x="0.2128%" y="1013" width="0.1537%" height="15" fill="rgb(235,93,37)" fg:x="18" fg:w="13"/><text x="0.4628%" y="1023.50"></text></g><g><title>core::slice::sort::recurse (3 samples, 0.04%)</title><rect x="0.3665%" y="1013" width="0.0355%" height="15" fill="rgb(213,116,39)" fg:x="31" fg:w="3"/><text x="0.6165%" y="1023.50"></text></g><g><title>[unknown] (34 samples, 0.40%)</title><rect x="0.0709%" y="1029" width="0.4020%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="34"/><text x="0.3209%" y="1039.50"></text></g><g><title>malloc (6 samples, 0.07%)</title><rect x="0.4020%" y="1013" width="0.0709%" height="15" fill="rgb(206,96,30)" fg:x="34" fg:w="6"/><text x="0.6520%" y="1023.50"></text></g><g><title>core::intrinsics::copy (9 samples, 0.11%)</title><rect x="0.9695%" y="357" width="0.1064%" height="15" fill="rgb(218,138,4)" fg:x="82" fg:w="9"/><text x="1.2195%" y="367.50"></text></g><g><title>[libc.so.6] (7 samples, 0.08%)</title><rect x="0.9931%" y="341" width="0.0828%" height="15" fill="rgb(250,191,14)" fg:x="84" fg:w="7"/><text x="1.2431%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (4 samples, 0.05%)</title><rect x="1.1941%" y="325" width="0.0473%" height="15" fill="rgb(239,60,40)" fg:x="101" fg:w="4"/><text x="1.4441%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (4 samples, 0.05%)</title><rect x="1.1941%" y="309" width="0.0473%" height="15" fill="rgb(206,27,48)" fg:x="101" fg:w="4"/><text x="1.4441%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (15 samples, 0.18%)</title><rect x="1.0759%" y="357" width="0.1773%" height="15" fill="rgb(225,35,8)" fg:x="91" fg:w="15"/><text x="1.3259%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (15 samples, 0.18%)</title><rect x="1.0759%" y="341" width="0.1773%" height="15" fill="rgb(250,213,24)" fg:x="91" fg:w="15"/><text x="1.3259%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.01%)</title><rect x="1.2414%" y="325" width="0.0118%" height="15" fill="rgb(247,123,22)" fg:x="105" fg:w="1"/><text x="1.4914%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.24%)</title><rect x="1.2533%" y="261" width="0.2365%" height="15" fill="rgb(231,138,38)" fg:x="106" fg:w="20"/><text x="1.5033%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.24%)</title><rect x="1.2533%" y="245" width="0.2365%" height="15" fill="rgb(231,145,46)" fg:x="106" fg:w="20"/><text x="1.5033%" y="255.50"></text></g><g><title>__rdl_dealloc (20 samples, 0.24%)</title><rect x="1.2533%" y="229" width="0.2365%" height="15" fill="rgb(251,118,11)" fg:x="106" fg:w="20"/><text x="1.5033%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (20 samples, 0.24%)</title><rect x="1.2533%" y="213" width="0.2365%" height="15" fill="rgb(217,147,25)" fg:x="106" fg:w="20"/><text x="1.5033%" y="223.50"></text></g><g><title>cfree (17 samples, 0.20%)</title><rect x="1.2887%" y="197" width="0.2010%" height="15" fill="rgb(247,81,37)" fg:x="109" fg:w="17"/><text x="1.5387%" y="207.50"></text></g><g><title>[libc.so.6] (15 samples, 0.18%)</title><rect x="1.3124%" y="181" width="0.1773%" height="15" fill="rgb(209,12,38)" fg:x="111" fg:w="15"/><text x="1.5624%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u8,i8)&gt;&gt; (21 samples, 0.25%)</title><rect x="1.2533%" y="357" width="0.2483%" height="15" fill="rgb(227,1,9)" fg:x="106" fg:w="21"/><text x="1.5033%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.25%)</title><rect x="1.2533%" y="341" width="0.2483%" height="15" fill="rgb(248,47,43)" fg:x="106" fg:w="21"/><text x="1.5033%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u8,i8),alloc::alloc::Global&gt;&gt; (21 samples, 0.25%)</title><rect x="1.2533%" y="325" width="0.2483%" height="15" fill="rgb(221,10,30)" fg:x="106" fg:w="21"/><text x="1.5033%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.25%)</title><rect x="1.2533%" y="309" width="0.2483%" height="15" fill="rgb(210,229,1)" fg:x="106" fg:w="21"/><text x="1.5033%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,i8)&gt;&gt; (21 samples, 0.25%)</title><rect x="1.2533%" y="293" width="0.2483%" height="15" fill="rgb(222,148,37)" fg:x="106" fg:w="21"/><text x="1.5033%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.25%)</title><rect x="1.2533%" y="277" width="0.2483%" height="15" fill="rgb(234,67,33)" fg:x="106" fg:w="21"/><text x="1.5033%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="1.4897%" y="261" width="0.0118%" height="15" fill="rgb(247,98,35)" fg:x="126" fg:w="1"/><text x="1.7397%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (10 samples, 0.12%)</title><rect x="1.5961%" y="101" width="0.1182%" height="15" fill="rgb(247,138,52)" fg:x="135" fg:w="10"/><text x="1.8461%" y="111.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (10 samples, 0.12%)</title><rect x="1.5961%" y="85" width="0.1182%" height="15" fill="rgb(213,79,30)" fg:x="135" fg:w="10"/><text x="1.8461%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (10 samples, 0.12%)</title><rect x="1.5961%" y="69" width="0.1182%" height="15" fill="rgb(246,177,23)" fg:x="135" fg:w="10"/><text x="1.8461%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (10 samples, 0.12%)</title><rect x="1.5961%" y="53" width="0.1182%" height="15" fill="rgb(230,62,27)" fg:x="135" fg:w="10"/><text x="1.8461%" y="63.50"></text></g><g><title>core::ptr::write (10 samples, 0.12%)</title><rect x="1.5961%" y="37" width="0.1182%" height="15" fill="rgb(216,154,8)" fg:x="135" fg:w="10"/><text x="1.8461%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (49 samples, 0.58%)</title><rect x="1.5961%" y="149" width="0.5793%" height="15" fill="rgb(244,35,45)" fg:x="135" fg:w="49"/><text x="1.8461%" y="159.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (49 samples, 0.58%)</title><rect x="1.5961%" y="133" width="0.5793%" height="15" fill="rgb(251,115,12)" fg:x="135" fg:w="49"/><text x="1.8461%" y="143.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (49 samples, 0.58%)</title><rect x="1.5961%" y="117" width="0.5793%" height="15" fill="rgb(240,54,50)" fg:x="135" fg:w="49"/><text x="1.8461%" y="127.50"></text></g><g><title>monte_carlo_sim::sim_avx512::simulate::_{{closure}} (39 samples, 0.46%)</title><rect x="1.7144%" y="101" width="0.4611%" height="15" fill="rgb(233,84,52)" fg:x="145" fg:w="39"/><text x="1.9644%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (58 samples, 0.69%)</title><rect x="1.5015%" y="293" width="0.6857%" height="15" fill="rgb(207,117,47)" fg:x="127" fg:w="58"/><text x="1.7515%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (58 samples, 0.69%)</title><rect x="1.5015%" y="277" width="0.6857%" height="15" fill="rgb(249,43,39)" fg:x="127" fg:w="58"/><text x="1.7515%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (58 samples, 0.69%)</title><rect x="1.5015%" y="261" width="0.6857%" height="15" fill="rgb(209,38,44)" fg:x="127" fg:w="58"/><text x="1.7515%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58 samples, 0.69%)</title><rect x="1.5015%" y="245" width="0.6857%" height="15" fill="rgb(236,212,23)" fg:x="127" fg:w="58"/><text x="1.7515%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58 samples, 0.69%)</title><rect x="1.5015%" y="229" width="0.6857%" height="15" fill="rgb(242,79,21)" fg:x="127" fg:w="58"/><text x="1.7515%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58 samples, 0.69%)</title><rect x="1.5015%" y="213" width="0.6857%" height="15" fill="rgb(211,96,35)" fg:x="127" fg:w="58"/><text x="1.7515%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58 samples, 0.69%)</title><rect x="1.5015%" y="197" width="0.6857%" height="15" fill="rgb(253,215,40)" fg:x="127" fg:w="58"/><text x="1.7515%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (58 samples, 0.69%)</title><rect x="1.5015%" y="181" width="0.6857%" height="15" fill="rgb(211,81,21)" fg:x="127" fg:w="58"/><text x="1.7515%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (58 samples, 0.69%)</title><rect x="1.5015%" y="165" width="0.6857%" height="15" fill="rgb(208,190,38)" fg:x="127" fg:w="58"/><text x="1.7515%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="2.1755%" y="149" width="0.0118%" height="15" fill="rgb(235,213,38)" fg:x="184" fg:w="1"/><text x="2.4255%" y="159.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="2.1755%" y="133" width="0.0118%" height="15" fill="rgb(237,122,38)" fg:x="184" fg:w="1"/><text x="2.4255%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.01%)</title><rect x="2.1873%" y="293" width="0.0118%" height="15" fill="rgb(244,218,35)" fg:x="185" fg:w="1"/><text x="2.4373%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.01%)</title><rect x="2.1873%" y="277" width="0.0118%" height="15" fill="rgb(240,68,47)" fg:x="185" fg:w="1"/><text x="2.4373%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.01%)</title><rect x="2.1873%" y="261" width="0.0118%" height="15" fill="rgb(210,16,53)" fg:x="185" fg:w="1"/><text x="2.4373%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.01%)</title><rect x="2.1873%" y="245" width="0.0118%" height="15" fill="rgb(235,124,12)" fg:x="185" fg:w="1"/><text x="2.4373%" y="255.50"></text></g><g><title>__rdl_alloc (20 samples, 0.24%)</title><rect x="2.2109%" y="181" width="0.2365%" height="15" fill="rgb(224,169,11)" fg:x="187" fg:w="20"/><text x="2.4609%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.24%)</title><rect x="2.2109%" y="165" width="0.2365%" height="15" fill="rgb(250,166,2)" fg:x="187" fg:w="20"/><text x="2.4609%" y="175.50"></text></g><g><title>malloc (20 samples, 0.24%)</title><rect x="2.2109%" y="149" width="0.2365%" height="15" fill="rgb(242,216,29)" fg:x="187" fg:w="20"/><text x="2.4609%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (81 samples, 0.96%)</title><rect x="1.5015%" y="341" width="0.9577%" height="15" fill="rgb(230,116,27)" fg:x="127" fg:w="81"/><text x="1.7515%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (81 samples, 0.96%)</title><rect x="1.5015%" y="325" width="0.9577%" height="15" fill="rgb(228,99,48)" fg:x="127" fg:w="81"/><text x="1.7515%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (81 samples, 0.96%)</title><rect x="1.5015%" y="309" width="0.9577%" height="15" fill="rgb(253,11,6)" fg:x="127" fg:w="81"/><text x="1.7515%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (22 samples, 0.26%)</title><rect x="2.1991%" y="293" width="0.2601%" height="15" fill="rgb(247,143,39)" fg:x="186" fg:w="22"/><text x="2.4491%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22 samples, 0.26%)</title><rect x="2.1991%" y="277" width="0.2601%" height="15" fill="rgb(236,97,10)" fg:x="186" fg:w="22"/><text x="2.4491%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.26%)</title><rect x="2.1991%" y="261" width="0.2601%" height="15" fill="rgb(233,208,19)" fg:x="186" fg:w="22"/><text x="2.4491%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 0.26%)</title><rect x="2.1991%" y="245" width="0.2601%" height="15" fill="rgb(216,164,2)" fg:x="186" fg:w="22"/><text x="2.4491%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.25%)</title><rect x="2.2109%" y="229" width="0.2483%" height="15" fill="rgb(220,129,5)" fg:x="187" fg:w="21"/><text x="2.4609%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.25%)</title><rect x="2.2109%" y="213" width="0.2483%" height="15" fill="rgb(242,17,10)" fg:x="187" fg:w="21"/><text x="2.4609%" y="223.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.25%)</title><rect x="2.2109%" y="197" width="0.2483%" height="15" fill="rgb(242,107,0)" fg:x="187" fg:w="21"/><text x="2.4609%" y="207.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.01%)</title><rect x="2.4474%" y="181" width="0.0118%" height="15" fill="rgb(251,28,31)" fg:x="207" fg:w="1"/><text x="2.6974%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (61 samples, 0.72%)</title><rect x="2.4947%" y="277" width="0.7212%" height="15" fill="rgb(233,223,10)" fg:x="211" fg:w="61"/><text x="2.7447%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (61 samples, 0.72%)</title><rect x="2.4947%" y="261" width="0.7212%" height="15" fill="rgb(215,21,27)" fg:x="211" fg:w="61"/><text x="2.7447%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (19 samples, 0.22%)</title><rect x="2.9913%" y="245" width="0.2246%" height="15" fill="rgb(232,23,21)" fg:x="253" fg:w="19"/><text x="3.2413%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 0.96%)</title><rect x="4.0080%" y="261" width="0.9577%" height="15" fill="rgb(244,5,23)" fg:x="339" fg:w="81"/><text x="4.2580%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (81 samples, 0.96%)</title><rect x="4.0080%" y="245" width="0.9577%" height="15" fill="rgb(226,81,46)" fg:x="339" fg:w="81"/><text x="4.2580%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (81 samples, 0.96%)</title><rect x="4.0080%" y="229" width="0.9577%" height="15" fill="rgb(247,70,30)" fg:x="339" fg:w="81"/><text x="4.2580%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (47 samples, 0.56%)</title><rect x="4.4100%" y="213" width="0.5557%" height="15" fill="rgb(212,68,19)" fg:x="373" fg:w="47"/><text x="4.6600%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (59 samples, 0.70%)</title><rect x="4.9657%" y="261" width="0.6976%" height="15" fill="rgb(240,187,13)" fg:x="420" fg:w="59"/><text x="5.2157%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;(u8,i8)&gt;&gt; (155 samples, 1.83%)</title><rect x="5.6633%" y="261" width="1.8326%" height="15" fill="rgb(223,113,26)" fg:x="479" fg:w="155"/><text x="5.9133%" y="271.50">c..</text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.22%)</title><rect x="7.2712%" y="245" width="0.2246%" height="15" fill="rgb(206,192,2)" fg:x="615" fg:w="19"/><text x="7.5212%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.22%)</title><rect x="7.2712%" y="229" width="0.2246%" height="15" fill="rgb(241,108,4)" fg:x="615" fg:w="19"/><text x="7.5212%" y="239.50"></text></g><g><title>core::ptr::read (8 samples, 0.09%)</title><rect x="7.4959%" y="261" width="0.0946%" height="15" fill="rgb(247,173,49)" fg:x="634" fg:w="8"/><text x="7.7459%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i8&gt;::lt (48 samples, 0.57%)</title><rect x="7.5904%" y="245" width="0.5675%" height="15" fill="rgb(224,114,35)" fg:x="642" fg:w="48"/><text x="7.8404%" y="255.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by_key (582 samples, 6.88%)</title><rect x="1.5015%" y="357" width="6.8811%" height="15" fill="rgb(245,159,27)" fg:x="127" fg:w="582"/><text x="1.7515%" y="367.50">itertools..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (501 samples, 5.92%)</title><rect x="2.4592%" y="341" width="5.9234%" height="15" fill="rgb(245,172,44)" fg:x="208" fg:w="501"/><text x="2.7092%" y="351.50">core::sl..</text></g><g><title>core::slice::sort::quicksort (501 samples, 5.92%)</title><rect x="2.4592%" y="325" width="5.9234%" height="15" fill="rgb(236,23,11)" fg:x="208" fg:w="501"/><text x="2.7092%" y="335.50">core::sl..</text></g><g><title>core::slice::sort::recurse (499 samples, 5.90%)</title><rect x="2.4829%" y="309" width="5.8997%" height="15" fill="rgb(205,117,38)" fg:x="210" fg:w="499"/><text x="2.7329%" y="319.50">core::s..</text></g><g><title>core::slice::sort::insertion_sort_shift_left (498 samples, 5.89%)</title><rect x="2.4947%" y="293" width="5.8879%" height="15" fill="rgb(237,72,25)" fg:x="211" fg:w="498"/><text x="2.7447%" y="303.50">core::s..</text></g><g><title>core::slice::sort::insert_tail (437 samples, 5.17%)</title><rect x="3.2159%" y="277" width="5.1667%" height="15" fill="rgb(244,70,9)" fg:x="272" fg:w="437"/><text x="3.4659%" y="287.50">core::..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by_key::_{{closure}} (67 samples, 0.79%)</title><rect x="7.5904%" y="261" width="0.7921%" height="15" fill="rgb(217,125,39)" fg:x="642" fg:w="67"/><text x="7.8404%" y="271.50"></text></g><g><title>monte_carlo_sim::sim_avx512::simulate::_{{closure}} (19 samples, 0.22%)</title><rect x="8.1580%" y="245" width="0.2246%" height="15" fill="rgb(235,36,10)" fg:x="690" fg:w="19"/><text x="8.4080%" y="255.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="8.3944%" y="341" width="0.0473%" height="15" fill="rgb(251,123,47)" fg:x="710" fg:w="4"/><text x="8.6444%" y="351.50"></text></g><g><title>monte_carlo_sim::sim_avx512::State::reset_table (6 samples, 0.07%)</title><rect x="8.3826%" y="357" width="0.0709%" height="15" fill="rgb(221,13,13)" fg:x="709" fg:w="6"/><text x="8.6326%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.01%)</title><rect x="8.4417%" y="341" width="0.0118%" height="15" fill="rgb(238,131,9)" fg:x="714" fg:w="1"/><text x="8.6917%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.01%)</title><rect x="8.4417%" y="325" width="0.0118%" height="15" fill="rgb(211,50,8)" fg:x="714" fg:w="1"/><text x="8.6917%" y="335.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_add_pd (177 samples, 2.09%)</title><rect x="13.2892%" y="341" width="2.0927%" height="15" fill="rgb(245,182,24)" fg:x="1124" fg:w="177"/><text x="13.5392%" y="351.50">c..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_cmp_pd_mask (227 samples, 2.68%)</title><rect x="15.3819%" y="341" width="2.6838%" height="15" fill="rgb(242,14,37)" fg:x="1301" fg:w="227"/><text x="15.6319%" y="351.50">co..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_load_pd (42 samples, 0.50%)</title><rect x="18.0657%" y="341" width="0.4966%" height="15" fill="rgb(246,228,12)" fg:x="1528" fg:w="42"/><text x="18.3157%" y="351.50"></text></g><g><title>core::ptr::read (42 samples, 0.50%)</title><rect x="18.0657%" y="325" width="0.4966%" height="15" fill="rgb(213,55,15)" fg:x="1528" fg:w="42"/><text x="18.3157%" y="335.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_mask_add_pd (286 samples, 3.38%)</title><rect x="18.5623%" y="341" width="3.3814%" height="15" fill="rgb(209,9,3)" fg:x="1570" fg:w="286"/><text x="18.8123%" y="351.50">cor..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_reduce_add_pd (202 samples, 2.39%)</title><rect x="21.9437%" y="341" width="2.3883%" height="15" fill="rgb(230,59,30)" fg:x="1856" fg:w="202"/><text x="22.1937%" y="351.50">co..</text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="24.3202%" y="325" width="0.0118%" height="15" fill="rgb(209,121,21)" fg:x="2057" fg:w="1"/><text x="24.5702%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="24.3202%" y="309" width="0.0118%" height="15" fill="rgb(220,109,13)" fg:x="2057" fg:w="1"/><text x="24.5702%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="24.3202%" y="293" width="0.0118%" height="15" fill="rgb(232,18,1)" fg:x="2057" fg:w="1"/><text x="24.5702%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="24.3202%" y="277" width="0.0118%" height="15" fill="rgb(215,41,42)" fg:x="2057" fg:w="1"/><text x="24.5702%" y="287.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_set1_pd (62 samples, 0.73%)</title><rect x="24.3320%" y="341" width="0.7330%" height="15" fill="rgb(224,123,36)" fg:x="2058" fg:w="62"/><text x="24.5820%" y="351.50"></text></g><g><title>core::core_arch::simd::f64x8::splat (62 samples, 0.73%)</title><rect x="24.3320%" y="325" width="0.7330%" height="15" fill="rgb(240,125,3)" fg:x="2058" fg:w="62"/><text x="24.5820%" y="335.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_store_pd (42 samples, 0.50%)</title><rect x="25.0650%" y="341" width="0.4966%" height="15" fill="rgb(205,98,50)" fg:x="2120" fg:w="42"/><text x="25.3150%" y="351.50"></text></g><g><title>core::ptr::write (42 samples, 0.50%)</title><rect x="25.0650%" y="325" width="0.4966%" height="15" fill="rgb(205,185,37)" fg:x="2120" fg:w="42"/><text x="25.3150%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.06%)</title><rect x="25.5616%" y="341" width="0.0591%" height="15" fill="rgb(238,207,15)" fg:x="2162" fg:w="5"/><text x="25.8116%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.06%)</title><rect x="25.5616%" y="325" width="0.0591%" height="15" fill="rgb(213,199,42)" fg:x="2162" fg:w="5"/><text x="25.8116%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (4 samples, 0.05%)</title><rect x="25.5734%" y="309" width="0.0473%" height="15" fill="rgb(235,201,11)" fg:x="2163" fg:w="4"/><text x="25.8234%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="325" width="0.0118%" height="15" fill="rgb(207,46,11)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="309" width="0.0118%" height="15" fill="rgb(241,35,35)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="293" width="0.0118%" height="15" fill="rgb(243,32,47)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="277" width="0.0118%" height="15" fill="rgb(247,202,23)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="261" width="0.0118%" height="15" fill="rgb(219,102,11)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="245" width="0.0118%" height="15" fill="rgb(243,110,44)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="229" width="0.0118%" height="15" fill="rgb(222,74,54)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="213" width="0.0118%" height="15" fill="rgb(216,99,12)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="197" width="0.0118%" height="15" fill="rgb(226,22,26)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="181" width="0.0118%" height="15" fill="rgb(217,163,10)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="38.5079%" y="165" width="0.0118%" height="15" fill="rgb(213,25,53)" fg:x="3257" fg:w="1"/><text x="38.7579%" y="175.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_add_pd (1,020 samples, 12.06%)</title><rect x="38.5197%" y="325" width="12.0596%" height="15" fill="rgb(252,105,26)" fg:x="3258" fg:w="1020"/><text x="38.7697%" y="335.50">core::core_arch::x..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_mul_pd (391 samples, 4.62%)</title><rect x="50.5793%" y="325" width="4.6228%" height="15" fill="rgb(220,39,43)" fg:x="4278" fg:w="391"/><text x="50.8293%" y="335.50">core:..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_roundscale_pd (1,135 samples, 13.42%)</title><rect x="55.2022%" y="325" width="13.4192%" height="15" fill="rgb(229,68,48)" fg:x="4669" fg:w="1135"/><text x="55.4522%" y="335.50">core::core_arch::x86..</text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="309" width="0.0118%" height="15" fill="rgb(252,8,32)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="293" width="0.0118%" height="15" fill="rgb(223,20,43)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="277" width="0.0118%" height="15" fill="rgb(229,81,49)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="261" width="0.0118%" height="15" fill="rgb(236,28,36)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="245" width="0.0118%" height="15" fill="rgb(249,185,26)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="229" width="0.0118%" height="15" fill="rgb(249,174,33)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="213" width="0.0118%" height="15" fill="rgb(233,201,37)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="197" width="0.0118%" height="15" fill="rgb(221,78,26)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="181" width="0.0118%" height="15" fill="rgb(250,127,30)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="165" width="0.0118%" height="15" fill="rgb(230,49,44)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="149" width="0.0118%" height="15" fill="rgb(229,67,23)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="68.6096%" y="133" width="0.0118%" height="15" fill="rgb(249,83,47)" fg:x="5803" fg:w="1"/><text x="68.8596%" y="143.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_sub_pd (429 samples, 5.07%)</title><rect x="68.6214%" y="325" width="5.0721%" height="15" fill="rgb(215,43,3)" fg:x="5804" fg:w="429"/><text x="68.8714%" y="335.50">core::..</text></g><g><title>[unknown] (3 samples, 0.04%)</title><rect x="73.6581%" y="309" width="0.0355%" height="15" fill="rgb(238,154,13)" fg:x="6230" fg:w="3"/><text x="73.9081%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.04%)</title><rect x="73.6581%" y="293" width="0.0355%" height="15" fill="rgb(219,56,2)" fg:x="6230" fg:w="3"/><text x="73.9081%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.04%)</title><rect x="73.6581%" y="277" width="0.0355%" height="15" fill="rgb(233,0,4)" fg:x="6230" fg:w="3"/><text x="73.9081%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.04%)</title><rect x="73.6581%" y="261" width="0.0355%" height="15" fill="rgb(235,30,7)" fg:x="6230" fg:w="3"/><text x="73.9081%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="73.6817%" y="245" width="0.0118%" height="15" fill="rgb(250,79,13)" fg:x="6232" fg:w="1"/><text x="73.9317%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="73.6817%" y="229" width="0.0118%" height="15" fill="rgb(211,146,34)" fg:x="6232" fg:w="1"/><text x="73.9317%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="73.6817%" y="213" width="0.0118%" height="15" fill="rgb(228,22,38)" fg:x="6232" fg:w="1"/><text x="73.9317%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="73.6817%" y="197" width="0.0118%" height="15" fill="rgb(235,168,5)" fg:x="6232" fg:w="1"/><text x="73.9317%" y="207.50"></text></g><g><title>monte_carlo_sim::sim_avx512::mm512_movemask_pd (386 samples, 4.56%)</title><rect x="73.6935%" y="325" width="4.5637%" height="15" fill="rgb(221,155,16)" fg:x="6233" fg:w="386"/><text x="73.9435%" y="335.50">monte..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_cmpneq_epi64_mask (386 samples, 4.56%)</title><rect x="73.6935%" y="309" width="4.5637%" height="15" fill="rgb(215,215,53)" fg:x="6233" fg:w="386"/><text x="73.9435%" y="319.50">core:..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_add_epi64 (455 samples, 5.38%)</title><rect x="82.1707%" y="293" width="5.3795%" height="15" fill="rgb(223,4,10)" fg:x="6950" fg:w="455"/><text x="82.4207%" y="303.50">core::c..</text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="87.5266%" y="277" width="0.0236%" height="15" fill="rgb(234,103,6)" fg:x="7403" fg:w="2"/><text x="87.7766%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="87.5266%" y="261" width="0.0236%" height="15" fill="rgb(227,97,0)" fg:x="7403" fg:w="2"/><text x="87.7766%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="87.5266%" y="245" width="0.0236%" height="15" fill="rgb(234,150,53)" fg:x="7403" fg:w="2"/><text x="87.7766%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="87.5266%" y="229" width="0.0236%" height="15" fill="rgb(228,201,54)" fg:x="7403" fg:w="2"/><text x="87.7766%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="87.5266%" y="213" width="0.0236%" height="15" fill="rgb(222,22,37)" fg:x="7403" fg:w="2"/><text x="87.7766%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="87.5384%" y="197" width="0.0118%" height="15" fill="rgb(237,53,32)" fg:x="7404" fg:w="1"/><text x="87.7884%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="87.5384%" y="181" width="0.0118%" height="15" fill="rgb(233,25,53)" fg:x="7404" fg:w="1"/><text x="87.7884%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="87.5384%" y="165" width="0.0118%" height="15" fill="rgb(210,40,34)" fg:x="7404" fg:w="1"/><text x="87.7884%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="87.5384%" y="149" width="0.0118%" height="15" fill="rgb(241,220,44)" fg:x="7404" fg:w="1"/><text x="87.7884%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="87.5384%" y="133" width="0.0118%" height="15" fill="rgb(235,28,35)" fg:x="7404" fg:w="1"/><text x="87.7884%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="87.5384%" y="117" width="0.0118%" height="15" fill="rgb(210,56,17)" fg:x="7404" fg:w="1"/><text x="87.7884%" y="127.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_sll_epi64 (78 samples, 0.92%)</title><rect x="87.5502%" y="293" width="0.9222%" height="15" fill="rgb(224,130,29)" fg:x="7405" fg:w="78"/><text x="87.8002%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="88.4606%" y="277" width="0.0118%" height="15" fill="rgb(235,212,8)" fg:x="7482" fg:w="1"/><text x="88.7106%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="88.4606%" y="261" width="0.0118%" height="15" fill="rgb(223,33,50)" fg:x="7482" fg:w="1"/><text x="88.7106%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="88.4606%" y="245" width="0.0118%" height="15" fill="rgb(219,149,13)" fg:x="7482" fg:w="1"/><text x="88.7106%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="88.4606%" y="229" width="0.0118%" height="15" fill="rgb(250,156,29)" fg:x="7482" fg:w="1"/><text x="88.7106%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="88.4606%" y="213" width="0.0118%" height="15" fill="rgb(216,193,19)" fg:x="7482" fg:w="1"/><text x="88.7106%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="88.4606%" y="197" width="0.0118%" height="15" fill="rgb(216,135,14)" fg:x="7482" fg:w="1"/><text x="88.7106%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="88.4606%" y="181" width="0.0118%" height="15" fill="rgb(241,47,5)" fg:x="7482" fg:w="1"/><text x="88.7106%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="88.4606%" y="165" width="0.0118%" height="15" fill="rgb(233,42,35)" fg:x="7482" fg:w="1"/><text x="88.7106%" y="175.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_xor_si512 (441 samples, 5.21%)</title><rect x="88.4725%" y="293" width="5.2140%" height="15" fill="rgb(231,13,6)" fg:x="7483" fg:w="441"/><text x="88.7225%" y="303.50">core::..</text></g><g><title>&lt;simd_rand::specific::avx512::xoshiro256plus::Xoshiro256PlusX8 as simd_rand::specific::avx512::simdrand::SimdRand&gt;::next_m512i (1,498 samples, 17.71%)</title><rect x="78.2573%" y="309" width="17.7110%" height="15" fill="rgb(207,181,40)" fg:x="6619" fg:w="1498"/><text x="78.5073%" y="319.50">&lt;simd_rand::specific::avx512..</text></g><g><title>simd_rand::specific::avx512::rotate_left (193 samples, 2.28%)</title><rect x="93.6865%" y="293" width="2.2819%" height="15" fill="rgb(254,173,49)" fg:x="7924" fg:w="193"/><text x="93.9365%" y="303.50">s..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_or_si512 (193 samples, 2.28%)</title><rect x="93.6865%" y="277" width="2.2819%" height="15" fill="rgb(221,1,38)" fg:x="7924" fg:w="193"/><text x="93.9365%" y="287.50">c..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_mul_pd (227 samples, 2.68%)</title><rect x="95.9683%" y="309" width="2.6838%" height="15" fill="rgb(206,124,46)" fg:x="8117" fg:w="227"/><text x="96.2183%" y="319.50">co..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_srl_epi64 (59 samples, 0.70%)</title><rect x="98.6522%" y="309" width="0.6976%" height="15" fill="rgb(249,21,11)" fg:x="8344" fg:w="59"/><text x="98.9022%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="293" width="0.0118%" height="15" fill="rgb(222,201,40)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="277" width="0.0118%" height="15" fill="rgb(235,61,29)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="261" width="0.0118%" height="15" fill="rgb(219,207,3)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="245" width="0.0118%" height="15" fill="rgb(222,56,46)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="229" width="0.0118%" height="15" fill="rgb(239,76,54)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="213" width="0.0118%" height="15" fill="rgb(231,124,27)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="197" width="0.0118%" height="15" fill="rgb(249,195,6)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="181" width="0.0118%" height="15" fill="rgb(237,174,47)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="165" width="0.0118%" height="15" fill="rgb(206,201,31)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="149" width="0.0118%" height="15" fill="rgb(231,57,52)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="133" width="0.0118%" height="15" fill="rgb(248,177,22)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3379%" y="117" width="0.0118%" height="15" fill="rgb(215,211,37)" fg:x="8402" fg:w="1"/><text x="99.5879%" y="127.50"></text></g><g><title>monte-carlo-sim (8,453 samples, 99.94%)</title><rect x="0.0000%" y="1045" width="99.9409%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="8453"/><text x="0.2500%" y="1055.50">monte-carlo-sim</text></g><g><title>_start (8,413 samples, 99.47%)</title><rect x="0.4729%" y="1029" width="99.4680%" height="15" fill="rgb(227,165,31)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="1039.50">_start</text></g><g><title>__libc_start_main (8,413 samples, 99.47%)</title><rect x="0.4729%" y="1013" width="99.4680%" height="15" fill="rgb(228,167,24)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="1023.50">__libc_start_main</text></g><g><title>[libc.so.6] (8,413 samples, 99.47%)</title><rect x="0.4729%" y="997" width="99.4680%" height="15" fill="rgb(228,143,12)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="1007.50">[libc.so.6]</text></g><g><title>main (8,413 samples, 99.47%)</title><rect x="0.4729%" y="981" width="99.4680%" height="15" fill="rgb(249,149,8)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="991.50">main</text></g><g><title>std::rt::lang_start_internal (8,413 samples, 99.47%)</title><rect x="0.4729%" y="965" width="99.4680%" height="15" fill="rgb(243,35,44)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="975.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8,413 samples, 99.47%)</title><rect x="0.4729%" y="949" width="99.4680%" height="15" fill="rgb(246,89,9)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,413 samples, 99.47%)</title><rect x="0.4729%" y="933" width="99.4680%" height="15" fill="rgb(233,213,13)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,413 samples, 99.47%)</title><rect x="0.4729%" y="917" width="99.4680%" height="15" fill="rgb(233,141,41)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="927.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="901" width="99.4680%" height="15" fill="rgb(239,167,4)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="911.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (8,413 samples, 99.47%)</title><rect x="0.4729%" y="885" width="99.4680%" height="15" fill="rgb(209,217,16)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,413 samples, 99.47%)</title><rect x="0.4729%" y="869" width="99.4680%" height="15" fill="rgb(219,88,35)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,413 samples, 99.47%)</title><rect x="0.4729%" y="853" width="99.4680%" height="15" fill="rgb(220,193,23)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="863.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,413 samples, 99.47%)</title><rect x="0.4729%" y="837" width="99.4680%" height="15" fill="rgb(230,90,52)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="847.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="821" width="99.4680%" height="15" fill="rgb(252,106,19)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="831.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,413 samples, 99.47%)</title><rect x="0.4729%" y="805" width="99.4680%" height="15" fill="rgb(206,74,20)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="815.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,413 samples, 99.47%)</title><rect x="0.4729%" y="789" width="99.4680%" height="15" fill="rgb(230,138,44)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="799.50">core::ops::function::FnOnce::call_once</text></g><g><title>monte_carlo_sim::main (8,413 samples, 99.47%)</title><rect x="0.4729%" y="773" width="99.4680%" height="15" fill="rgb(235,182,43)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="783.50">monte_carlo_sim::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (8,413 samples, 99.47%)</title><rect x="0.4729%" y="757" width="99.4680%" height="15" fill="rgb(242,16,51)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="767.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on (8,413 samples, 99.47%)</title><rect x="0.4729%" y="741" width="99.4680%" height="15" fill="rgb(248,9,4)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="751.50">tokio::runtime::scheduler::current_thread::CurrentThread::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (8,413 samples, 99.47%)</title><rect x="0.4729%" y="725" width="99.4680%" height="15" fill="rgb(210,31,22)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="735.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="709" width="99.4680%" height="15" fill="rgb(239,54,39)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="719.50">tokio::runtime::scheduler::current_thread::CurrentThread::block_on::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (8,413 samples, 99.47%)</title><rect x="0.4729%" y="693" width="99.4680%" height="15" fill="rgb(230,99,41)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="703.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter (8,413 samples, 99.47%)</title><rect x="0.4729%" y="677" width="99.4680%" height="15" fill="rgb(253,106,12)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="687.50">tokio::runtime::scheduler::current_thread::CoreGuard::enter</text></g><g><title>tokio::runtime::context::set_scheduler (8,413 samples, 99.47%)</title><rect x="0.4729%" y="661" width="99.4680%" height="15" fill="rgb(213,46,41)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="671.50">tokio::runtime::context::set_scheduler</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8,413 samples, 99.47%)</title><rect x="0.4729%" y="645" width="99.4680%" height="15" fill="rgb(215,133,35)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="655.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8,413 samples, 99.47%)</title><rect x="0.4729%" y="629" width="99.4680%" height="15" fill="rgb(213,28,5)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="639.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::runtime::context::set_scheduler::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="613" width="99.4680%" height="15" fill="rgb(215,77,49)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="623.50">tokio::runtime::context::set_scheduler::_{{closure}}</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (8,413 samples, 99.47%)</title><rect x="0.4729%" y="597" width="99.4680%" height="15" fill="rgb(248,100,22)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="607.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="581" width="99.4680%" height="15" fill="rgb(208,67,9)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="591.50">tokio::runtime::scheduler::current_thread::CoreGuard::enter::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="565" width="99.4680%" height="15" fill="rgb(219,133,21)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="575.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}}</text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (8,413 samples, 99.47%)</title><rect x="0.4729%" y="549" width="99.4680%" height="15" fill="rgb(246,46,29)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="559.50">tokio::runtime::scheduler::current_thread::Context::enter</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}}::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="533" width="99.4680%" height="15" fill="rgb(246,185,52)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="543.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}}::_{{closure}}</text></g><g><title>tokio::runtime::coop::budget (8,413 samples, 99.47%)</title><rect x="0.4729%" y="517" width="99.4680%" height="15" fill="rgb(252,136,11)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="527.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (8,413 samples, 99.47%)</title><rect x="0.4729%" y="501" width="99.4680%" height="15" fill="rgb(219,138,53)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="511.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}}::_{{closure}}::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="485" width="99.4680%" height="15" fill="rgb(211,51,23)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="495.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8,413 samples, 99.47%)</title><rect x="0.4729%" y="469" width="99.4680%" height="15" fill="rgb(247,221,28)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="479.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>monte_carlo_sim::main::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="453" width="99.4680%" height="15" fill="rgb(251,222,45)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="463.50">monte_carlo_sim::main::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,413 samples, 99.47%)</title><rect x="0.4729%" y="437" width="99.4680%" height="15" fill="rgb(217,162,53)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="447.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,413 samples, 99.47%)</title><rect x="0.4729%" y="421" width="99.4680%" height="15" fill="rgb(229,93,14)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="431.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="405" width="99.4680%" height="15" fill="rgb(209,67,49)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="415.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>monte_carlo_sim::main::_{{closure}}::_{{closure}} (8,413 samples, 99.47%)</title><rect x="0.4729%" y="389" width="99.4680%" height="15" fill="rgb(213,87,29)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="399.50">monte_carlo_sim::main::_{{closure}}::_{{closure}}</text></g><g><title>monte_carlo_sim::sim_avx512::simulate (8,413 samples, 99.47%)</title><rect x="0.4729%" y="373" width="99.4680%" height="15" fill="rgb(205,151,52)" fg:x="40" fg:w="8413"/><text x="0.7229%" y="383.50">monte_carlo_sim::sim_avx512::simulate</text></g><g><title>monte_carlo_sim::sim_avx512::tick (7,738 samples, 91.49%)</title><rect x="8.4535%" y="357" width="91.4873%" height="15" fill="rgb(253,215,39)" fg:x="715" fg:w="7738"/><text x="8.7035%" y="367.50">monte_carlo_sim::sim_avx512::tick</text></g><g><title>monte_carlo_sim::sim_avx512::simulate_sides (6,286 samples, 74.32%)</title><rect x="25.6207%" y="341" width="74.3202%" height="15" fill="rgb(221,220,41)" fg:x="2167" fg:w="6286"/><text x="25.8707%" y="351.50">monte_carlo_sim::sim_avx512::simulate_sides</text></g><g><title>simd_rand::specific::avx512::simdrand::SimdRand::next_m512d (1,834 samples, 21.68%)</title><rect x="78.2573%" y="325" width="21.6836%" height="15" fill="rgb(218,133,21)" fg:x="6619" fg:w="1834"/><text x="78.5073%" y="335.50">simd_rand::specific::avx512::simdr..</text></g><g><title>simd_rand::specific::avx512::simdrand::m512i_to_m512d (50 samples, 0.59%)</title><rect x="99.3497%" y="309" width="0.5912%" height="15" fill="rgb(221,193,43)" fg:x="8403" fg:w="50"/><text x="99.5997%" y="319.50"></text></g><g><title>all (8,458 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="8458"/><text x="0.2500%" y="1071.50"></text></g><g><title>perf-exec (5 samples, 0.06%)</title><rect x="99.9409%" y="1045" width="0.0591%" height="15" fill="rgb(253,114,12)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="1029" width="0.0591%" height="15" fill="rgb(215,223,47)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="1013" width="0.0591%" height="15" fill="rgb(248,225,23)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="997" width="0.0591%" height="15" fill="rgb(250,108,0)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="981" width="0.0591%" height="15" fill="rgb(228,208,7)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="965" width="0.0591%" height="15" fill="rgb(244,45,10)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="975.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="949" width="0.0591%" height="15" fill="rgb(207,125,25)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="959.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="933" width="0.0591%" height="15" fill="rgb(210,195,18)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="943.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="917" width="0.0591%" height="15" fill="rgb(249,80,12)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="927.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="901" width="0.0591%" height="15" fill="rgb(221,65,9)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="911.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="885" width="0.0591%" height="15" fill="rgb(235,49,36)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="895.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="869" width="0.0591%" height="15" fill="rgb(225,32,20)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="879.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="853" width="0.0591%" height="15" fill="rgb(215,141,46)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="863.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="837" width="0.0591%" height="15" fill="rgb(250,160,47)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="821" width="0.0591%" height="15" fill="rgb(216,222,40)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="805" width="0.0591%" height="15" fill="rgb(234,217,39)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="789" width="0.0591%" height="15" fill="rgb(207,178,40)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.9409%" y="773" width="0.0591%" height="15" fill="rgb(221,136,13)" fg:x="8453" fg:w="5"/><text x="100.1909%" y="783.50"></text></g></svg></svg>