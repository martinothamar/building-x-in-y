<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="8694"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0460%" y="917" width="0.0115%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.2960%" y="927.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0460%" y="901" width="0.0115%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.2960%" y="911.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.0460%" y="949" width="0.0230%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="2"/><text x="0.2960%" y="959.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.0460%" y="933" width="0.0230%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="2"/><text x="0.2960%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0575%" y="917" width="0.0115%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.3075%" y="927.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.08%)</title><rect x="0.0000%" y="965" width="0.0805%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="7"/><text x="0.2500%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0690%" y="949" width="0.0115%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="0.3190%" y="959.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="0.0805%" y="965" width="0.0115%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="0.3305%" y="975.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="0.0805%" y="949" width="0.0115%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="1"/><text x="0.3305%" y="959.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.01%)</title><rect x="0.0805%" y="933" width="0.0115%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="1"/><text x="0.3305%" y="943.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (1 samples, 0.01%)</title><rect x="0.0805%" y="917" width="0.0115%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="1"/><text x="0.3305%" y="927.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.01%)</title><rect x="0.0805%" y="901" width="0.0115%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="1"/><text x="0.3305%" y="911.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.01%)</title><rect x="0.0805%" y="885" width="0.0115%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="1"/><text x="0.3305%" y="895.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.01%)</title><rect x="0.0805%" y="869" width="0.0115%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="1"/><text x="0.3305%" y="879.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.01%)</title><rect x="0.0805%" y="853" width="0.0115%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="0.3305%" y="863.50"></text></g><g><title>__sysconf (1 samples, 0.01%)</title><rect x="0.0805%" y="837" width="0.0115%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1"/><text x="0.3305%" y="847.50"></text></g><g><title>core::intrinsics::copy (17 samples, 0.20%)</title><rect x="0.4946%" y="357" width="0.1955%" height="15" fill="rgb(225,20,46)" fg:x="43" fg:w="17"/><text x="0.7446%" y="367.50"></text></g><g><title>[libc.so.6] (17 samples, 0.20%)</title><rect x="0.4946%" y="341" width="0.1955%" height="15" fill="rgb(210,31,41)" fg:x="43" fg:w="17"/><text x="0.7446%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.01%)</title><rect x="0.6901%" y="357" width="0.0115%" height="15" fill="rgb(221,200,47)" fg:x="60" fg:w="1"/><text x="0.9401%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.01%)</title><rect x="0.6901%" y="341" width="0.0115%" height="15" fill="rgb(226,26,5)" fg:x="60" fg:w="1"/><text x="0.9401%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.01%)</title><rect x="0.6901%" y="325" width="0.0115%" height="15" fill="rgb(249,33,26)" fg:x="60" fg:w="1"/><text x="0.9401%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u8,i8)&gt;&gt; (28 samples, 0.32%)</title><rect x="0.7016%" y="357" width="0.3221%" height="15" fill="rgb(235,183,28)" fg:x="61" fg:w="28"/><text x="0.9516%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.32%)</title><rect x="0.7016%" y="341" width="0.3221%" height="15" fill="rgb(221,5,38)" fg:x="61" fg:w="28"/><text x="0.9516%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u8,i8),alloc::alloc::Global&gt;&gt; (28 samples, 0.32%)</title><rect x="0.7016%" y="325" width="0.3221%" height="15" fill="rgb(247,18,42)" fg:x="61" fg:w="28"/><text x="0.9516%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.32%)</title><rect x="0.7016%" y="309" width="0.3221%" height="15" fill="rgb(241,131,45)" fg:x="61" fg:w="28"/><text x="0.9516%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,i8)&gt;&gt; (28 samples, 0.32%)</title><rect x="0.7016%" y="293" width="0.3221%" height="15" fill="rgb(249,31,29)" fg:x="61" fg:w="28"/><text x="0.9516%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.32%)</title><rect x="0.7016%" y="277" width="0.3221%" height="15" fill="rgb(225,111,53)" fg:x="61" fg:w="28"/><text x="0.9516%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.31%)</title><rect x="0.7131%" y="261" width="0.3106%" height="15" fill="rgb(238,160,17)" fg:x="62" fg:w="27"/><text x="0.9631%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.31%)</title><rect x="0.7131%" y="245" width="0.3106%" height="15" fill="rgb(214,148,48)" fg:x="62" fg:w="27"/><text x="0.9631%" y="255.50"></text></g><g><title>__rdl_dealloc (27 samples, 0.31%)</title><rect x="0.7131%" y="229" width="0.3106%" height="15" fill="rgb(232,36,49)" fg:x="62" fg:w="27"/><text x="0.9631%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (27 samples, 0.31%)</title><rect x="0.7131%" y="213" width="0.3106%" height="15" fill="rgb(209,103,24)" fg:x="62" fg:w="27"/><text x="0.9631%" y="223.50"></text></g><g><title>free (27 samples, 0.31%)</title><rect x="0.7131%" y="197" width="0.3106%" height="15" fill="rgb(229,88,8)" fg:x="62" fg:w="27"/><text x="0.9631%" y="207.50"></text></g><g><title>[libc.so.6] (15 samples, 0.17%)</title><rect x="0.8512%" y="181" width="0.1725%" height="15" fill="rgb(213,181,19)" fg:x="74" fg:w="15"/><text x="1.1012%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (10 samples, 0.12%)</title><rect x="1.1272%" y="101" width="0.1150%" height="15" fill="rgb(254,191,54)" fg:x="98" fg:w="10"/><text x="1.3772%" y="111.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (10 samples, 0.12%)</title><rect x="1.1272%" y="85" width="0.1150%" height="15" fill="rgb(241,83,37)" fg:x="98" fg:w="10"/><text x="1.3772%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (10 samples, 0.12%)</title><rect x="1.1272%" y="69" width="0.1150%" height="15" fill="rgb(233,36,39)" fg:x="98" fg:w="10"/><text x="1.3772%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (10 samples, 0.12%)</title><rect x="1.1272%" y="53" width="0.1150%" height="15" fill="rgb(226,3,54)" fg:x="98" fg:w="10"/><text x="1.3772%" y="63.50"></text></g><g><title>core::ptr::write (10 samples, 0.12%)</title><rect x="1.1272%" y="37" width="0.1150%" height="15" fill="rgb(245,192,40)" fg:x="98" fg:w="10"/><text x="1.3772%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (47 samples, 0.54%)</title><rect x="1.0352%" y="293" width="0.5406%" height="15" fill="rgb(238,167,29)" fg:x="90" fg:w="47"/><text x="1.2852%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (47 samples, 0.54%)</title><rect x="1.0352%" y="277" width="0.5406%" height="15" fill="rgb(232,182,51)" fg:x="90" fg:w="47"/><text x="1.2852%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (47 samples, 0.54%)</title><rect x="1.0352%" y="261" width="0.5406%" height="15" fill="rgb(231,60,39)" fg:x="90" fg:w="47"/><text x="1.2852%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.54%)</title><rect x="1.0352%" y="245" width="0.5406%" height="15" fill="rgb(208,69,12)" fg:x="90" fg:w="47"/><text x="1.2852%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.54%)</title><rect x="1.0352%" y="229" width="0.5406%" height="15" fill="rgb(235,93,37)" fg:x="90" fg:w="47"/><text x="1.2852%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.54%)</title><rect x="1.0352%" y="213" width="0.5406%" height="15" fill="rgb(213,116,39)" fg:x="90" fg:w="47"/><text x="1.2852%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.54%)</title><rect x="1.0352%" y="197" width="0.5406%" height="15" fill="rgb(222,207,29)" fg:x="90" fg:w="47"/><text x="1.2852%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (47 samples, 0.54%)</title><rect x="1.0352%" y="181" width="0.5406%" height="15" fill="rgb(206,96,30)" fg:x="90" fg:w="47"/><text x="1.2852%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (44 samples, 0.51%)</title><rect x="1.0697%" y="165" width="0.5061%" height="15" fill="rgb(218,138,4)" fg:x="93" fg:w="44"/><text x="1.3197%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (40 samples, 0.46%)</title><rect x="1.1157%" y="149" width="0.4601%" height="15" fill="rgb(250,191,14)" fg:x="97" fg:w="40"/><text x="1.3657%" y="159.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (39 samples, 0.45%)</title><rect x="1.1272%" y="133" width="0.4486%" height="15" fill="rgb(239,60,40)" fg:x="98" fg:w="39"/><text x="1.3772%" y="143.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (39 samples, 0.45%)</title><rect x="1.1272%" y="117" width="0.4486%" height="15" fill="rgb(206,27,48)" fg:x="98" fg:w="39"/><text x="1.3772%" y="127.50"></text></g><g><title>monte_carlo_sim::sim::simulate::{{closure}} (29 samples, 0.33%)</title><rect x="1.2422%" y="101" width="0.3336%" height="15" fill="rgb(225,35,8)" fg:x="108" fg:w="29"/><text x="1.4922%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.03%)</title><rect x="1.5758%" y="293" width="0.0345%" height="15" fill="rgb(250,213,24)" fg:x="137" fg:w="3"/><text x="1.8258%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.03%)</title><rect x="1.5758%" y="277" width="0.0345%" height="15" fill="rgb(247,123,22)" fg:x="137" fg:w="3"/><text x="1.8258%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.03%)</title><rect x="1.5758%" y="261" width="0.0345%" height="15" fill="rgb(231,138,38)" fg:x="137" fg:w="3"/><text x="1.8258%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.03%)</title><rect x="1.5758%" y="245" width="0.0345%" height="15" fill="rgb(231,145,46)" fg:x="137" fg:w="3"/><text x="1.8258%" y="255.50"></text></g><g><title>__rdl_alloc (24 samples, 0.28%)</title><rect x="1.6333%" y="181" width="0.2761%" height="15" fill="rgb(251,118,11)" fg:x="142" fg:w="24"/><text x="1.8833%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (24 samples, 0.28%)</title><rect x="1.6333%" y="165" width="0.2761%" height="15" fill="rgb(217,147,25)" fg:x="142" fg:w="24"/><text x="1.8833%" y="175.50"></text></g><g><title>malloc (24 samples, 0.28%)</title><rect x="1.6333%" y="149" width="0.2761%" height="15" fill="rgb(247,81,37)" fg:x="142" fg:w="24"/><text x="1.8833%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (77 samples, 0.89%)</title><rect x="1.0352%" y="341" width="0.8857%" height="15" fill="rgb(209,12,38)" fg:x="90" fg:w="77"/><text x="1.2852%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (77 samples, 0.89%)</title><rect x="1.0352%" y="325" width="0.8857%" height="15" fill="rgb(227,1,9)" fg:x="90" fg:w="77"/><text x="1.2852%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (77 samples, 0.89%)</title><rect x="1.0352%" y="309" width="0.8857%" height="15" fill="rgb(248,47,43)" fg:x="90" fg:w="77"/><text x="1.2852%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (27 samples, 0.31%)</title><rect x="1.6103%" y="293" width="0.3106%" height="15" fill="rgb(221,10,30)" fg:x="140" fg:w="27"/><text x="1.8603%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 0.31%)</title><rect x="1.6103%" y="277" width="0.3106%" height="15" fill="rgb(210,229,1)" fg:x="140" fg:w="27"/><text x="1.8603%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 0.31%)</title><rect x="1.6103%" y="261" width="0.3106%" height="15" fill="rgb(222,148,37)" fg:x="140" fg:w="27"/><text x="1.8603%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.31%)</title><rect x="1.6103%" y="245" width="0.3106%" height="15" fill="rgb(234,67,33)" fg:x="140" fg:w="27"/><text x="1.8603%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.29%)</title><rect x="1.6333%" y="229" width="0.2876%" height="15" fill="rgb(247,98,35)" fg:x="142" fg:w="25"/><text x="1.8833%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.29%)</title><rect x="1.6333%" y="213" width="0.2876%" height="15" fill="rgb(247,138,52)" fg:x="142" fg:w="25"/><text x="1.8833%" y="223.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.29%)</title><rect x="1.6333%" y="197" width="0.2876%" height="15" fill="rgb(213,79,30)" fg:x="142" fg:w="25"/><text x="1.8833%" y="207.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.01%)</title><rect x="1.9094%" y="181" width="0.0115%" height="15" fill="rgb(246,177,23)" fg:x="166" fg:w="1"/><text x="2.1594%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (95 samples, 1.09%)</title><rect x="2.1049%" y="277" width="1.0927%" height="15" fill="rgb(230,62,27)" fg:x="183" fg:w="95"/><text x="2.3549%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (95 samples, 1.09%)</title><rect x="2.1049%" y="261" width="1.0927%" height="15" fill="rgb(216,154,8)" fg:x="183" fg:w="95"/><text x="2.3549%" y="271.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (14 samples, 0.16%)</title><rect x="3.0366%" y="245" width="0.1610%" height="15" fill="rgb(244,35,45)" fg:x="264" fg:w="14"/><text x="3.2866%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (14 samples, 0.16%)</title><rect x="3.0366%" y="229" width="0.1610%" height="15" fill="rgb(251,115,12)" fg:x="264" fg:w="14"/><text x="3.2866%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.26%)</title><rect x="3.4507%" y="261" width="0.2646%" height="15" fill="rgb(240,54,50)" fg:x="300" fg:w="23"/><text x="3.7007%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (23 samples, 0.26%)</title><rect x="3.4507%" y="245" width="0.2646%" height="15" fill="rgb(233,84,52)" fg:x="300" fg:w="23"/><text x="3.7007%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (23 samples, 0.26%)</title><rect x="3.4507%" y="229" width="0.2646%" height="15" fill="rgb(207,117,47)" fg:x="300" fg:w="23"/><text x="3.7007%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (23 samples, 0.26%)</title><rect x="3.4507%" y="213" width="0.2646%" height="15" fill="rgb(249,43,39)" fg:x="300" fg:w="23"/><text x="3.7007%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (95 samples, 1.09%)</title><rect x="3.7152%" y="261" width="1.0927%" height="15" fill="rgb(209,38,44)" fg:x="323" fg:w="95"/><text x="3.9652%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;(u8,i8)&gt;&gt; (190 samples, 2.19%)</title><rect x="4.8079%" y="261" width="2.1854%" height="15" fill="rgb(236,212,23)" fg:x="418" fg:w="190"/><text x="5.0579%" y="271.50">c..</text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.13%)</title><rect x="6.8668%" y="245" width="0.1265%" height="15" fill="rgb(242,79,21)" fg:x="597" fg:w="11"/><text x="7.1168%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.13%)</title><rect x="6.8668%" y="229" width="0.1265%" height="15" fill="rgb(211,96,35)" fg:x="597" fg:w="11"/><text x="7.1168%" y="239.50"></text></g><g><title>core::ptr::read (7 samples, 0.08%)</title><rect x="6.9933%" y="261" width="0.0805%" height="15" fill="rgb(253,215,40)" fg:x="608" fg:w="7"/><text x="7.2433%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i8&gt;::lt (23 samples, 0.26%)</title><rect x="7.0738%" y="245" width="0.2646%" height="15" fill="rgb(211,81,21)" fg:x="615" fg:w="23"/><text x="7.3238%" y="255.50"></text></g><g><title>itertools::Itertools::sorted_unstable_by_key (585 samples, 6.73%)</title><rect x="1.0237%" y="357" width="6.7288%" height="15" fill="rgb(208,190,38)" fg:x="89" fg:w="585"/><text x="1.2737%" y="367.50">itertools..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (507 samples, 5.83%)</title><rect x="1.9209%" y="341" width="5.8316%" height="15" fill="rgb(235,213,38)" fg:x="167" fg:w="507"/><text x="2.1709%" y="351.50">core::s..</text></g><g><title>core::slice::sort::quicksort (507 samples, 5.83%)</title><rect x="1.9209%" y="325" width="5.8316%" height="15" fill="rgb(237,122,38)" fg:x="167" fg:w="507"/><text x="2.1709%" y="335.50">core::s..</text></g><g><title>core::slice::sort::recurse (503 samples, 5.79%)</title><rect x="1.9669%" y="309" width="5.7856%" height="15" fill="rgb(244,218,35)" fg:x="171" fg:w="503"/><text x="2.2169%" y="319.50">core::s..</text></g><g><title>core::slice::sort::insertion_sort_shift_left (498 samples, 5.73%)</title><rect x="2.0244%" y="293" width="5.7281%" height="15" fill="rgb(240,68,47)" fg:x="176" fg:w="498"/><text x="2.2744%" y="303.50">core::s..</text></g><g><title>core::slice::sort::insert_tail (396 samples, 4.55%)</title><rect x="3.1976%" y="277" width="4.5549%" height="15" fill="rgb(210,16,53)" fg:x="278" fg:w="396"/><text x="3.4476%" y="287.50">core:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (59 samples, 0.68%)</title><rect x="7.0738%" y="261" width="0.6786%" height="15" fill="rgb(235,124,12)" fg:x="615" fg:w="59"/><text x="7.3238%" y="271.50"></text></g><g><title>monte_carlo_sim::sim::simulate::{{closure}} (36 samples, 0.41%)</title><rect x="7.3384%" y="245" width="0.4141%" height="15" fill="rgb(224,169,11)" fg:x="638" fg:w="36"/><text x="7.5884%" y="255.50"></text></g><g><title>monte_carlo_sim::sim::State::reset_table (12 samples, 0.14%)</title><rect x="7.7525%" y="357" width="0.1380%" height="15" fill="rgb(250,166,2)" fg:x="674" fg:w="12"/><text x="8.0025%" y="367.50"></text></g><g><title>[libc.so.6] (11 samples, 0.13%)</title><rect x="7.7640%" y="341" width="0.1265%" height="15" fill="rgb(242,216,29)" fg:x="675" fg:w="11"/><text x="8.0140%" y="351.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_add_pd (42 samples, 0.48%)</title><rect x="15.2634%" y="341" width="0.4831%" height="15" fill="rgb(230,116,27)" fg:x="1327" fg:w="42"/><text x="15.5134%" y="351.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_cmp_pd_mask (446 samples, 5.13%)</title><rect x="15.7465%" y="341" width="5.1300%" height="15" fill="rgb(228,99,48)" fg:x="1369" fg:w="446"/><text x="15.9965%" y="351.50">core::..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_load_pd (3 samples, 0.03%)</title><rect x="20.8765%" y="341" width="0.0345%" height="15" fill="rgb(253,11,6)" fg:x="1815" fg:w="3"/><text x="21.1265%" y="351.50"></text></g><g><title>core::ptr::read (3 samples, 0.03%)</title><rect x="20.8765%" y="325" width="0.0345%" height="15" fill="rgb(247,143,39)" fg:x="1815" fg:w="3"/><text x="21.1265%" y="335.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_mask_add_pd (289 samples, 3.32%)</title><rect x="20.9110%" y="341" width="3.3241%" height="15" fill="rgb(236,97,10)" fg:x="1818" fg:w="289"/><text x="21.1610%" y="351.50">cor..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_add_pd (51 samples, 0.59%)</title><rect x="23.6485%" y="325" width="0.5866%" height="15" fill="rgb(233,208,19)" fg:x="2056" fg:w="51"/><text x="23.8985%" y="335.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_reduce_add_pd (163 samples, 1.87%)</title><rect x="24.2351%" y="341" width="1.8749%" height="15" fill="rgb(216,164,2)" fg:x="2107" fg:w="163"/><text x="24.4851%" y="351.50">c..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_set1_pd (26 samples, 0.30%)</title><rect x="26.1100%" y="341" width="0.2991%" height="15" fill="rgb(220,129,5)" fg:x="2270" fg:w="26"/><text x="26.3600%" y="351.50"></text></g><g><title>core::core_arch::simd::f64x8::splat (26 samples, 0.30%)</title><rect x="26.1100%" y="325" width="0.2991%" height="15" fill="rgb(242,17,10)" fg:x="2270" fg:w="26"/><text x="26.3600%" y="335.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_store_pd (167 samples, 1.92%)</title><rect x="26.4090%" y="341" width="1.9209%" height="15" fill="rgb(242,107,0)" fg:x="2296" fg:w="167"/><text x="26.6590%" y="351.50">c..</text></g><g><title>core::ptr::write (167 samples, 1.92%)</title><rect x="26.4090%" y="325" width="1.9209%" height="15" fill="rgb(251,28,31)" fg:x="2296" fg:w="167"/><text x="26.6590%" y="335.50">c..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12 samples, 0.14%)</title><rect x="28.3299%" y="341" width="0.1380%" height="15" fill="rgb(233,223,10)" fg:x="2463" fg:w="12"/><text x="28.5799%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12 samples, 0.14%)</title><rect x="28.3299%" y="325" width="0.1380%" height="15" fill="rgb(215,21,27)" fg:x="2463" fg:w="12"/><text x="28.5799%" y="335.50"></text></g><g><title>&lt;u32 as core::iter::range::Step&gt;::forward_unchecked (12 samples, 0.14%)</title><rect x="28.3299%" y="309" width="0.1380%" height="15" fill="rgb(232,23,21)" fg:x="2463" fg:w="12"/><text x="28.5799%" y="319.50"></text></g><g><title>core::num::&lt;impl u32&gt;::unchecked_add (12 samples, 0.14%)</title><rect x="28.3299%" y="293" width="0.1380%" height="15" fill="rgb(244,5,23)" fg:x="2463" fg:w="12"/><text x="28.5799%" y="303.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_add_pd (1,012 samples, 11.64%)</title><rect x="42.0750%" y="325" width="11.6402%" height="15" fill="rgb(226,81,46)" fg:x="3658" fg:w="1012"/><text x="42.3250%" y="335.50">core::core_arch::..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_mul_pd (146 samples, 1.68%)</title><rect x="53.7152%" y="325" width="1.6793%" height="15" fill="rgb(247,70,30)" fg:x="4670" fg:w="146"/><text x="53.9652%" y="335.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_roundscale_pd (590 samples, 6.79%)</title><rect x="55.3945%" y="325" width="6.7863%" height="15" fill="rgb(212,68,19)" fg:x="4816" fg:w="590"/><text x="55.6445%" y="335.50">core::cor..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_sub_pd (547 samples, 6.29%)</title><rect x="62.1808%" y="325" width="6.2917%" height="15" fill="rgb(240,187,13)" fg:x="5406" fg:w="547"/><text x="62.4308%" y="335.50">core::co..</text></g><g><title>monte_carlo_sim::sim::mm512_movemask_pd (486 samples, 5.59%)</title><rect x="68.4725%" y="325" width="5.5901%" height="15" fill="rgb(223,113,26)" fg:x="5953" fg:w="486"/><text x="68.7225%" y="335.50">monte_c..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_cmpneq_epi64_mask (486 samples, 5.59%)</title><rect x="68.4725%" y="309" width="5.5901%" height="15" fill="rgb(206,192,2)" fg:x="5953" fg:w="486"/><text x="68.7225%" y="319.50">core::c..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_add_epi64 (1,386 samples, 15.94%)</title><rect x="75.5349%" y="293" width="15.9420%" height="15" fill="rgb(241,108,4)" fg:x="6567" fg:w="1386"/><text x="75.7849%" y="303.50">core::core_arch::x86::avx..</text></g><g><title>core::core_arch::x86::avx512f::_mm512_sll_epi64 (131 samples, 1.51%)</title><rect x="91.4769%" y="293" width="1.5068%" height="15" fill="rgb(247,173,49)" fg:x="7953" fg:w="131"/><text x="91.7269%" y="303.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_xor_si512 (299 samples, 3.44%)</title><rect x="92.9837%" y="293" width="3.4392%" height="15" fill="rgb(224,114,35)" fg:x="8084" fg:w="299"/><text x="93.2337%" y="303.50">cor..</text></g><g><title>&lt;simd_rand::specific::avx512::xoshiro256plus::Xoshiro256PlusX8 as simd_rand::specific::avx512::simdrand::SimdRand&gt;::next_m512i (1,960 samples, 22.54%)</title><rect x="74.0626%" y="309" width="22.5443%" height="15" fill="rgb(245,159,27)" fg:x="6439" fg:w="1960"/><text x="74.3126%" y="319.50">&lt;simd_rand::specific::avx512::xoshir..</text></g><g><title>simd_rand::specific::avx512::rotate_left (16 samples, 0.18%)</title><rect x="96.4228%" y="293" width="0.1840%" height="15" fill="rgb(245,172,44)" fg:x="8383" fg:w="16"/><text x="96.6728%" y="303.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_or_si512 (16 samples, 0.18%)</title><rect x="96.4228%" y="277" width="0.1840%" height="15" fill="rgb(236,23,11)" fg:x="8383" fg:w="16"/><text x="96.6728%" y="287.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_mul_pd (59 samples, 0.68%)</title><rect x="96.6069%" y="309" width="0.6786%" height="15" fill="rgb(205,117,38)" fg:x="8399" fg:w="59"/><text x="96.8569%" y="319.50"></text></g><g><title>core::core_arch::x86::avx512f::_mm512_srl_epi64 (196 samples, 2.25%)</title><rect x="97.2855%" y="309" width="2.2544%" height="15" fill="rgb(237,72,25)" fg:x="8458" fg:w="196"/><text x="97.5355%" y="319.50">c..</text></g><g><title>all (8,694 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="8694"/><text x="0.2500%" y="1007.50"></text></g><g><title>monte-carlo-sim (8,694 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="8694"/><text x="0.2500%" y="991.50">monte-carlo-sim</text></g><g><title>_start (8,686 samples, 99.91%)</title><rect x="0.0920%" y="965" width="99.9080%" height="15" fill="rgb(235,36,10)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="975.50">_start</text></g><g><title>__libc_start_main (8,686 samples, 99.91%)</title><rect x="0.0920%" y="949" width="99.9080%" height="15" fill="rgb(251,123,47)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="959.50">__libc_start_main</text></g><g><title>[libc.so.6] (8,686 samples, 99.91%)</title><rect x="0.0920%" y="933" width="99.9080%" height="15" fill="rgb(221,13,13)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="943.50">[libc.so.6]</text></g><g><title>main (8,686 samples, 99.91%)</title><rect x="0.0920%" y="917" width="99.9080%" height="15" fill="rgb(238,131,9)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal (8,686 samples, 99.91%)</title><rect x="0.0920%" y="901" width="99.9080%" height="15" fill="rgb(211,50,8)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8,686 samples, 99.91%)</title><rect x="0.0920%" y="885" width="99.9080%" height="15" fill="rgb(245,182,24)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,686 samples, 99.91%)</title><rect x="0.0920%" y="869" width="99.9080%" height="15" fill="rgb(242,14,37)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,686 samples, 99.91%)</title><rect x="0.0920%" y="853" width="99.9080%" height="15" fill="rgb(246,228,12)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="863.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (8,686 samples, 99.91%)</title><rect x="0.0920%" y="837" width="99.9080%" height="15" fill="rgb(213,55,15)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="847.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (8,686 samples, 99.91%)</title><rect x="0.0920%" y="821" width="99.9080%" height="15" fill="rgb(209,9,3)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,686 samples, 99.91%)</title><rect x="0.0920%" y="805" width="99.9080%" height="15" fill="rgb(230,59,30)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,686 samples, 99.91%)</title><rect x="0.0920%" y="789" width="99.9080%" height="15" fill="rgb(209,121,21)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,686 samples, 99.91%)</title><rect x="0.0920%" y="773" width="99.9080%" height="15" fill="rgb(220,109,13)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (8,686 samples, 99.91%)</title><rect x="0.0920%" y="757" width="99.9080%" height="15" fill="rgb(232,18,1)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="767.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,686 samples, 99.91%)</title><rect x="0.0920%" y="741" width="99.9080%" height="15" fill="rgb(215,41,42)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,686 samples, 99.91%)</title><rect x="0.0920%" y="725" width="99.9080%" height="15" fill="rgb(224,123,36)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="735.50">core::ops::function::FnOnce::call_once</text></g><g><title>monte_carlo_sim::main (8,686 samples, 99.91%)</title><rect x="0.0920%" y="709" width="99.9080%" height="15" fill="rgb(240,125,3)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="719.50">monte_carlo_sim::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (8,686 samples, 99.91%)</title><rect x="0.0920%" y="693" width="99.9080%" height="15" fill="rgb(205,98,50)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="703.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on (8,686 samples, 99.91%)</title><rect x="0.0920%" y="677" width="99.9080%" height="15" fill="rgb(205,185,37)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="687.50">tokio::runtime::scheduler::current_thread::CurrentThread::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (8,686 samples, 99.91%)</title><rect x="0.0920%" y="661" width="99.9080%" height="15" fill="rgb(238,207,15)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="671.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on::{{closure}} (8,686 samples, 99.91%)</title><rect x="0.0920%" y="645" width="99.9080%" height="15" fill="rgb(213,199,42)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="655.50">tokio::runtime::scheduler::current_thread::CurrentThread::block_on::{{closure}}</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (8,686 samples, 99.91%)</title><rect x="0.0920%" y="629" width="99.9080%" height="15" fill="rgb(235,201,11)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="639.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter (8,686 samples, 99.91%)</title><rect x="0.0920%" y="613" width="99.9080%" height="15" fill="rgb(207,46,11)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="623.50">tokio::runtime::scheduler::current_thread::CoreGuard::enter</text></g><g><title>tokio::runtime::context::set_scheduler (8,686 samples, 99.91%)</title><rect x="0.0920%" y="597" width="99.9080%" height="15" fill="rgb(241,35,35)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="607.50">tokio::runtime::context::set_scheduler</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8,686 samples, 99.91%)</title><rect x="0.0920%" y="581" width="99.9080%" height="15" fill="rgb(243,32,47)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="591.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8,686 samples, 99.91%)</title><rect x="0.0920%" y="565" width="99.9080%" height="15" fill="rgb(247,202,23)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="575.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (8,686 samples, 99.91%)</title><rect x="0.0920%" y="549" width="99.9080%" height="15" fill="rgb(219,102,11)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="559.50">tokio::runtime::context::set_scheduler::{{closure}}</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (8,686 samples, 99.91%)</title><rect x="0.0920%" y="533" width="99.9080%" height="15" fill="rgb(243,110,44)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="543.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}} (8,686 samples, 99.91%)</title><rect x="0.0920%" y="517" width="99.9080%" height="15" fill="rgb(222,74,54)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="527.50">tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}}</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}} (8,686 samples, 99.91%)</title><rect x="0.0920%" y="501" width="99.9080%" height="15" fill="rgb(216,99,12)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="511.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}</text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (8,686 samples, 99.91%)</title><rect x="0.0920%" y="485" width="99.9080%" height="15" fill="rgb(226,22,26)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="495.50">tokio::runtime::scheduler::current_thread::Context::enter</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}} (8,686 samples, 99.91%)</title><rect x="0.0920%" y="469" width="99.9080%" height="15" fill="rgb(217,163,10)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="479.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}</text></g><g><title>tokio::runtime::coop::budget (8,686 samples, 99.91%)</title><rect x="0.0920%" y="453" width="99.9080%" height="15" fill="rgb(213,25,53)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="463.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (8,686 samples, 99.91%)</title><rect x="0.0920%" y="437" width="99.9080%" height="15" fill="rgb(252,105,26)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="447.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}} (8,686 samples, 99.91%)</title><rect x="0.0920%" y="421" width="99.9080%" height="15" fill="rgb(220,39,43)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="431.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}}</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8,686 samples, 99.91%)</title><rect x="0.0920%" y="405" width="99.9080%" height="15" fill="rgb(229,68,48)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="415.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>monte_carlo_sim::main::{{closure}} (8,686 samples, 99.91%)</title><rect x="0.0920%" y="389" width="99.9080%" height="15" fill="rgb(252,8,32)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="399.50">monte_carlo_sim::main::{{closure}}</text></g><g><title>monte_carlo_sim::sim::simulate (8,686 samples, 99.91%)</title><rect x="0.0920%" y="373" width="99.9080%" height="15" fill="rgb(223,20,43)" fg:x="8" fg:w="8686"/><text x="0.3420%" y="383.50">monte_carlo_sim::sim::simulate</text></g><g><title>monte_carlo_sim::sim::tick (8,008 samples, 92.11%)</title><rect x="7.8905%" y="357" width="92.1095%" height="15" fill="rgb(229,81,49)" fg:x="686" fg:w="8008"/><text x="8.1405%" y="367.50">monte_carlo_sim::sim::tick</text></g><g><title>monte_carlo_sim::sim::simulate_sides (6,219 samples, 71.53%)</title><rect x="28.4679%" y="341" width="71.5321%" height="15" fill="rgb(236,28,36)" fg:x="2475" fg:w="6219"/><text x="28.7179%" y="351.50">monte_carlo_sim::sim::simulate_sides</text></g><g><title>simd_rand::specific::avx512::simdrand::SimdRand::next_m512d (2,255 samples, 25.94%)</title><rect x="74.0626%" y="325" width="25.9374%" height="15" fill="rgb(249,185,26)" fg:x="6439" fg:w="2255"/><text x="74.3126%" y="335.50">simd_rand::specific::avx512::simdrand::Si..</text></g><g><title>simd_rand::specific::avx512::simdrand::m512i_to_m512d (40 samples, 0.46%)</title><rect x="99.5399%" y="309" width="0.4601%" height="15" fill="rgb(249,174,33)" fg:x="8654" fg:w="40"/><text x="99.7899%" y="319.50"></text></g></svg></svg>